<.flash_group flash={@flash} />
<div class="lg:p-[8rem] md:p-[4rem] sm:p-[1rem] p-[.5rem] h-full flex flex-col gap-3">

  <!-- Search -->

  <div class="flex items-center gap-4 h-12">
    <div class="
      border w-full h-full rounded-md border hover:bg-[#1a1a1aa1]
      duration-100 px-4
    ">

      <form
          id="search-form"
          method="get"
          action="/dashboard"
          class="flex gap-2 items-center"
        >
        <input
          id="search-input"
          type="text"
          name="query"
          class="
            w-full bg-transparent outline-none border-none h-full
            focus:outline-none focus:ring-0
          "
          placeholder="Search..."
          value={@query || ""}
        />
        <input
          type="hidden"
          id="selected-types"
          name="types"
          value={Enum.join(@selected_types || [], ",")}
        />
      </form>
    </div>
    <!--
    <div class="
      border w-min text-nowrap h-full px-6 cursor-pointer duration-100
      flex items-center justify-center hover:bg-[#1a1a1aa1] rounded-md
    ">
      <h4>Sort by</h4>
    </div>
    -->
    <div class="
      border w-min text-nowrap h-full px-6 cursor-pointer duration-100
      flex items-center justify-center hover:bg-[#1a1a1aa1] rounded-md
    ">
      <h4>New</h4>
    </div>
  </div>

  <!-- Search -->

  <div id="types-container" class="flex items-center gap-3 overflow-x-auto scrollbar-hide">
    <%= for type <- @types do %>
      <div
        data-type={type}
        class={
          "border w-min text-nowrap h-full p-2 px-4 cursor-pointer duration-100 flex items-center justify-center hover:bg-[#1a1a1aa1] rounded-md " <>
          if type in (@selected_types || []), do: "bg-[#1a1a1aa1]", else: ""
        }
        onclick="toggleTypeSelection(this)"
      >
        <h4><%= type %></h4>
      </div>
    <% end %>
  </div>

  <div class="
    flex items-center gap-[.5rem] h-full overflow-hidden overflow-x-auto snap-x snap-mandatory
    scrollbar-hide
  ">
    <div class=" events-container
      flex flex-col gap-3 w-full h-full overflow-y-auto box-border
      min-w-full md:min-w-[0px] snap-center
    ">
      <%= if Enum.empty?(@events) do %>
        <div class="
          w-full h-full flex items-center justify-center
          text-xl
        ">No Events</div>
      <% end %>

      <%= for event <- @events do %>
        <div class="
          border py-3 px-4 cursor-pointer duration-100
          flex hover:bg-[#1a1a1aa1] rounded-md flex flex-col snap-always
        ">
          <h4><%= event.name %></h4>
          <p><%= event.date %></p>
        </div>
      <% end %>
    </div>

    <div class="
      flex flex-col gap-3 w-full h-full max-w-[400px] border rounded-md
      min-w-full md:min-w-[0px] snap-center
    ">
    </div>
  </div>

</div>

<script>
// Initialize the selected types
let selectedTypes = [];

// Restore selected types from the query string on page load
document.addEventListener("DOMContentLoaded", () => {
  const urlParams = new URLSearchParams(window.location.search);
  const types = urlParams.get("types");
  if (types) {
    selectedTypes = types.split(",");
    selectedTypes.forEach((type) => {
      const element = document.querySelector(`[data-type="${type}"]`);
      if (element) {
        element.style.backgroundColor = "#1a1a1aa1"; // Apply the custom background color
      }
    });
  }
});

// Toggle Type Selection
function toggleTypeSelection(element) {
  const type = element.dataset.type;

  // Add or remove the type from the selectedTypes array
  if (selectedTypes.includes(type)) {
    // Remove the type
    selectedTypes = selectedTypes.filter((t) => t !== type);
    element.style.backgroundColor = ""; // Reset background color
  } else {
    // Add the type
    selectedTypes.push(type);
    element.style.backgroundColor = "#1a1a1aa1"; // Apply the custom background color
  }

  // Update the URL query parameters dynamically
  updateUrlParams();

  // Fetch updated events based on the new state
  fetchUpdatedEvents();
}

// Update the URL query parameters
function updateUrlParams() {
  const urlParams = new URLSearchParams(window.location.search);
  const searchInput = document.querySelector("#search-input").value;

  // Update the types parameter
  if (selectedTypes.length > 0) {
    urlParams.set("types", selectedTypes.join(","));
  } else {
    urlParams.delete("types"); // Remove types if none are selected
  }

  // Preserve the query parameter (search input)
  if (searchInput) {
    urlParams.set("query", searchInput);
  } else {
    urlParams.delete("query"); // Remove query if empty
  }

  // Update the URL without reloading the page
  window.history.replaceState({}, "", `${window.location.pathname}?${urlParams.toString()}`);
}

// Fetch updated events from the server
function fetchUpdatedEvents() {
  const urlParams = new URLSearchParams(window.location.search);
  const queryString = urlParams.toString();

  fetch(`/dashboard?${queryString}`, {
    headers: { "X-Requested-With": "XMLHttpRequest" },
  })
    .then((response) => response.text())
    .then((html) => {
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, "text/html");
      const newEvents = doc.querySelector(".events-container");
      if (newEvents) {
        document.querySelector(".events-container").innerHTML = newEvents.innerHTML;

        // Sync the selected types after updating events
        syncSelectedTypes();
      } else {
        console.error("Error: .events-container not found in the response");
      }
    })
    .catch((error) => console.error("Error fetching updated events:", error));
}

// Sync the selected types in the UI
function syncSelectedTypes() {
  document.querySelectorAll("[data-type]").forEach((element) => {
    const type = element.dataset.type;
    if (selectedTypes.includes(type)) {
      element.style.backgroundColor = "#1a1a1aa1"; // Set background for selected types
    } else {
      element.style.backgroundColor = ""; // Reset background for unselected types
    }
  });
}
</script>
